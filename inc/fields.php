<?php
// exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// check if class already exists
if (!class_exists('dh_acf_field_icomoon')) {


    class dh_acf_field_icomoon extends acf_field
    {

        /*
        *  __construct
        *
        *  This function will setup the field type data
        *
        *  @type	function
        *  @date	5/03/2014
        *  @since	5.0.0
        *
        *  @param	n/a
        *  @return	n/a
        */

        function __construct($settings)
        {

            /*
            *  name (string) Single word, no spaces. Underscores allowed
            */

            $this->name = 'dh_acf_icomoon';


            /*
            *  label (string) Multiple words, can include spaces, visible when selecting a field type
            */

            $this->label = __('Icomoon', 'dh_acf_icomoon');


            /*
            *  category (string) basic | content | choice | relational | jquery | layout | CUSTOM GROUP NAME
            */

            $this->category = 'content';


            /*
            *  defaults (array) Array of default settings which are merged into the field object. These are used later in settings
            */

            $this->defaults = array(
				'selection_json_path' => get_stylesheet_directory() . '/assets/fonts/selection.json',
			);


            /*
            *  l10n (array) Array of strings that are used in JavaScript. This allows JS strings to be translated in PHP and loaded via:
            *  var message = acf._e('FIELD_NAME', 'error');
            */

            $this->l10n = array(
                'error' => __('Error! Please enter a higher value', 'dh_acf_icomoon'),
            );


            /*
            *  settings (array) Store plugin settings (url, path, version) as a reference for later use with assets
            */

            $this->settings = $settings;


            // do not delete!
			parent::__construct();

        }


        /*
        *  render_field_settings()
        *
        *  Create extra settings for your field. These are visible when editing a field
        *
        *  @type	action
        *  @since	3.6
        *  @date	23/01/13
        *
        *  @param	$field (array) the $field being edited
        *  @return	n/a
        */

        function render_field_settings($field)
        {

            /*
            *  acf_render_field_setting
            *
            *  This function will create a setting for your field. Simply pass the $field parameter and an array of field settings.
            *  The array of settings does not require a `value` or `prefix`; These settings are found from the $field array.
            *
            *  More than one setting can be added by copy/paste the above code.
            *  Please note that you must also have a matching $defaults value for the field name (font_size)
            */

            // Admin field: Selection.json
            acf_render_field_setting($field, array(
                'label' => __('Selection.json', 'dh_acf_icomoon'),
                'instructions' => __('The path to the selection.json file generated by IcoMoon. Leave empty to get path automatically.', 'dh_acf_icomoon'),
                'type' => 'text',
                'name' => 'selection_json_path'
            ));

            // Admin field: Return value
            acf_render_field_setting($field, array(
                'label' => __('Return value', 'dh_acf_icomoon'),
                'instructions' => __('Specify the returned value on front end', 'dh_acf_icomoon'),
                'type' => 'radio',
                'name' => 'display_type',
                'choices' => array(
                    'icon' => 'Icon element',
                    'icon_class' => 'Icon class',
                    'svg' => 'SVG element'
                )
            ));

        }


        /*
        *  render_field()
        *
        *  Create the HTML interface for your field
        *
        *  @param	$field (array) the $field being rendered
        *
        *  @type	action
        *  @since	3.6
        *  @date	23/01/13
        *
        *  @param	$field (array) the $field being edited
        *  @return	n/a
        */

        function render_field($field)
        {
            $choices = $this->fw_get_icomoon_json($field['selection_json_path']);
            $value = esc_attr($field['value']); // selected value
            $input_html = '<input type="hidden" name="' . esc_attr($field['name']) . '" value="' . $value . '"/>';

            echo $this->fw_icomoon_select_html($choices, $value, $input_html);
        }

        /**
         * FW Icomoon select
         *
         * @param       $icon_array
         * @param       $value
         * @param       $input_html
         * @param false $vc_element
         *
         * @return string
         */

        function fw_icomoon_select_html($icon_array, $value, $input_html, $vc_element = false)
        {
            $count_text = count($icon_array) . ' icons';
            $id = uniqid();
            $active_icon = array();

            /** Loop through icon **/
            $items = '';
            foreach ($icon_array as $icon) {
                $return_value = $vc_element ? "icon_class" : "name";
                $svg = $icon['icon_svg'];
                $name = $icon['name'];
                $is_selected = $icon[$return_value] == $value;
                $class = $is_selected ? "active" : "";

                if ($is_selected) {
                    $active_icon = $icon;
                }

                $items .= '<li><a data-fw="select" data-fw-value="' . $icon[$return_value] . '" href="#" class="' . $class . '" title="' . $name . '">' . $svg . '</a></li>';
            }

            /** Loop through icon **/
            $html = '<div class="fw-icomoon-select popup-top" id="' . $id . '">';

            // input
            $html .= '<div class="fw-icomoon-select__input">' . $input_html . '</div>';

            // field
            $html .= '<div class="fw-icomoon-select__field">';

            $html .= '<div class="fw-icomoon-select__field-col left">';
            $html .= '<div class="fw-icomoon-select__field-result" data-fw="popup-trigger">';
            $html .= '<span class="icon-svg">' . $active_icon['icon_svg'] . '</span>';
            $html .= '<span class="icon-name">' . $active_icon['name'] . '</span>';
            $html .= '</div>';
            $html .= '<a class="fw-icomoon-select__field-remove" data-fw="remove-value" href="#">â¨‰</a>';
            $html .= '</div>';

            $html .= '<div class="fw-icomoon-select__field-col right">';
            $html .= '<div class="fw-icomoon-select__field-button">';
            $html .= '<button class="button" type="button" data-fw="popup-trigger">';
            $html .= '<span class="select">Select icon</span>';
            $html .= '<span class="cancel">Cancel</span>';
            $html .= '</button>';
			$html .= '</div>';
			$html .= '</div>';

            $html .= '</div>'; // end field

            // popup
			$html .= '<div class="fw-icomoon-select__popup">';
			$html .= '<div class="fw-icomoon-select__popup-inner">';

            $html .= '<div class="fw-icomoon-select__popup-head">';
			$html .= '<span class="fw-icomoon-select__count-text">' . $count_text . '</span>';
			$html .= '</div>';

            $html .= '<div class="fw-icomoon-select__popup-body">';
            $html .= '<ul class="fw-icomoon-select__icons">';
            $html .= $items;
            $html .= '</ul>';
			$html .= '</div>';

            $html .= '</div>';
			$html .= '</div>'; // end popup

            $html .= '</div>';

            return $html;
		}


        /**
		 * FW Get icomoon array
		 *
		 * @param string $json_path
		 *
		 * @return array
		 */
        function fw_get_icomoon_json($json_path = '')
        {
            $icon_size = 32;
            $icon_array = array();
            $json_path = (!empty($json_path) && file_exists($json_path))
                ? $json_path
                : get_stylesheet_directory() . '/assets/fonts/selection.json';

            if ($json_path) {
                $json_obj = json_decode(file_get_contents($json_path), true);
                if ($json_obj) {
                    $prefix = $json_obj['preferences']['fontPref']['prefix'];
                    foreach ($json_obj['icons'] as $item) {
                        // get svg (Format the SVG path)
                        $icon_svg = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" 
			width="' . $icon_size . '" height="' . $icon_size . '" viewBox="0 0 1024 1024">';
                        $icon_svg .= '<title>' . $item['properties']['name'] . '</title>';
                        foreach ($item['icon']['paths'] as $path) {
                            $icon_svg .= '<path fill="#444" d="' . $path . '"></path>';
                        }
                        $icon_svg .= '</svg>';

                        $icon_array[$item['properties']['name']] = array(
                            'name' => $item['properties']['name'],
                            'icon_class' => $prefix . $item['properties']['name'],
                            'icon_svg' => $icon_svg,
                        );
                    }
				}
			}

            return $icon_array;
		}

        /*
        *  input_admin_enqueue_scripts()
        *
        *  This action is called in the admin_enqueue_scripts action on the edit screen where your field is created.
        *  Use this action to add CSS + JavaScript to assist your render_field() action.
        *
        *  @type	action (admin_enqueue_scripts)
        *  @since	3.6
        *  @date	23/01/13
        *
        *  @param	n/a
        *  @return	n/a
        */


        function input_admin_enqueue_scripts()
        {
            // vars
            $url = $this->settings['url'];
            $version = $this->settings['version'];

            // register & include CSS
            wp_register_style('dh-acf-field-icomoon', "{$url}assets/css/input.css", array('acf-input'), $version);
            wp_enqueue_style('dh-acf-field-icomoon');

            // register & include JS
            wp_register_script('dh-acf-field-icomoon', "{$url}assets/js/input.js", array('acf-input'), $version);
            wp_enqueue_script('dh-acf-field-icomoon');
        }


        /*
        *  format_value()
        *
        *  This filter is appied to the $value after it is loaded from the db and before it is returned to the template
        *
        *  @type	filter
        *  @since	3.6
        *  @date	23/01/13
        *
        *  @param	$value (mixed) the value which was loaded from the database
        *  @param	$post_id (mixed) the $post_id from which the value was loaded
        *  @param	$field (array) the field array holding all the field options
        *
        *  @return	$value (mixed) the modified value
        */


        function format_value($value, $post_id, $field)
        {
            if (empty($value)) {
                return $value;
            }

            $path = $field['selection_json_path'];
            $choices = $this->fw_get_icomoon_json($path);

            if (!array_key_exists($value, $choices)) {
                return '';
            }
            if ($field['display_type'] == 'icon') {
                return '<i class="' . $choices[$value]['icon_class'] . '"></i>';
            }
            if ($field['display_type'] == 'icon_class') {
                return $choices[$value]['icon_class'];
            }
            if ($field['display_type'] == 'svg') {
                return $choices[$value]['icon_svg'];
            }

            return $choices[$value]['icon_class'];
        }

    }

    // initialize
    new dh_acf_field_icomoon($this->settings);
}